<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy</title><link>http://openastronomy.org/Universe_OA/</link><description>This is an aggregator of openastronomy people</description><atom:link href="http://openastronomy.org/Universe_OA/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Wed, 18 Aug 2021 05:10:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>About my Google Summer of Code Project: Part 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;div&gt;&lt;p&gt;The last few days haven’t been as productive as earlier. We fixed some issues with the NDCubeSequence’s stacking PR and it looks like it’s ready to merge now. With some feedback from the community, I think it will happen soon. There have also been some minor updates to the PR that brings reproject’s other algorithms to NDCube.&lt;/p&gt;
&lt;p&gt;A new task that I’ve taken up now is identifying invariant axes in a cube. Let’s say there’s a 3D data cube where one of the axes corresponds to a quantity like time, which you don’t want to reproject onto another grid. Identifying this axis would let us reproject at only one point along this axis and then apply it throughout. This will speed up the execution significantly and require a lesser amount of memory. It’s a tricky path though and the first implementation might not be very efficient. What we’re trying to do is convert pixel coordinates to world coordinates using the source WCS, and convert it back from world to pixel using the target WCS. If the original and final pixel coordinates match, we can conclude that the axis is invariant.&lt;/p&gt;
&lt;p&gt;I shall update its progress soon, but this is all for now. GSoC is officially coming to an end, but as I said in the previous post, it doesn’t matter much for continuing my contributions to this community. I’ve been fascinated by this open-source environment and culture and learned so much along the way. I guess GSoC did serve its purpose for me.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There’s some work at sunraster, specifically updating it to work with ndcube 2.0 (whose RC1 was released recently). That sounds like a fun project given that I’m now familiar with ndcube. In fact, that was a project I had considered applying for as part of GSoC but hadn’t. I’ll let you all know how that goes. Cheers for now, I’ll talk to you in the next one!&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=8c7c62861783" width="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210817_0956_adwaitbhope/</guid><pubDate>Tue, 17 Aug 2021 08:56:14 GMT</pubDate></item><item><title>Time to review my GSoC Project</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_1603_rashmiraj137/</link><dc:creator>Raj Rashmi</dc:creator><description>&lt;div&gt;&lt;p&gt;With the end of the GSoC project, I will give this blog to summarise the JAX based optimization to analyze its applicability to enhance the loglikelihood calculation. The goal is to analyze, (i) the performance of different optimizers to evaluate the loglikelihood function, (ii) demonstrated the robustness of JAX to calculate gradients. And talk about the current code and corresponding improvement due to JAX.&lt;/p&gt;
&lt;p&gt;The application of loglikelihood fitting to periodograms is discussed in [1]. Let us start with analyzing best-fit power spectrum (i) with different sets of optimizers namely: &lt;em&gt;minimize(method=’Nelder-Mead’, ’Powell’, ’CG’, ’BFGS’, ’Newton-CG’, ’L-BFGS-B’, ’TNC’, ’COBYLA’, ’SLSQP’, ’trust-constr’, ’dogleg’, ’trust-ncg’, ’trust-krylov’, ’trust-exact’). &lt;/em&gt;The problem setting shifts the start and test parameters to study the graph of best fit optimizer using different “methods” listed above. First, we will stick with the Powell optimizer and try to check what is the current sensitivity of the implementation.&lt;/p&gt;
&lt;p&gt;Currently, we seek to find a solution to the problem when the optimization algorithm often gets stuck in local minima, terminate without meeting its formal success criteria, or fails due to any contributing factor. Possible ways are: (1) add more Lorentzian components, (2) reduce the amplitude, (3) start the optimization process with parameters very far away from the true parameters, (4) experiment with the different optimizers/ “methods” to investigate if there is more superior algorithm compared to Powell.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*oEfdtoL2Fa0XAbjmugMvnA.png"&gt;&lt;figcaption&gt;Reference: blog.gitguardian.com&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;So far the &lt;em&gt;Powell&lt;/em&gt; and &lt;em&gt;Nelder-Mead &lt;/em&gt;gives almost the same best-fit curve compared to other optimizers, surprisingly even better than &lt;em&gt;BFGS(which is a well-known &lt;/em&gt;numerical optimizer for an iterative method for solving unconstrained nonlinear optimization problems. This directs to more investigation with (1) and (2) and (3). Both (2) and (3) makes the algorithm fail with the current &lt;em&gt;scipy.optimize.minimize, &lt;/em&gt;and we can see the&lt;em&gt; &lt;/em&gt;graph as given below.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*1SA0BwGc48I8qRozxuK6CQ.png"&gt;&lt;/figure&gt;&lt;p&gt;I am still holding on to try &lt;a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.optimize.minimize.html"&gt;jax.scipy.optimize.minimize&lt;/a&gt; instead of &lt;a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.scipy.optimize.minimize.html"&gt;scipy.optimize.minimize&lt;/a&gt; and analyze the increment in robustness. Another way to enhance the current algorithm alongside experimenting with different optimisers is:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Use a different gradient finding method.&lt;/li&gt;&lt;li&gt;Speed up objective function.&lt;/li&gt;&lt;li&gt;Reduce the number of design variables.&lt;/li&gt;&lt;li&gt;Choose a better initial guess.&lt;/li&gt;&lt;li&gt;Use parallel processing.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In my next blog, I will provide a more detailed explanation of current events. In this blog, I highlighted the emphasis of analysis.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] Maximum likelihood fitting of X-ray power density spectra: Application to high-frequency quasi-periodic oscillations from the neutron star X-ray binary 4U1608-522. Didier Barret, Simon Vaughan. &lt;a href="https://arxiv.org/abs/1112.0535"&gt;https://arxiv.org/abs/1112.0535&lt;/a&gt;&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c34297f2dc81" width="1"&gt;&lt;/div&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_1603_rashmiraj137/</guid><pubDate>Mon, 16 Aug 2021 15:03:25 GMT</pubDate></item><item><title>Ah, the end?</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_0320_jeffreypaul15/</link><dc:creator>Jeffrey Paul</dc:creator><description>&lt;div&gt;&lt;p&gt;From when I’ve started writing these blog posts, I’ve taken quite a liking to writing these blog posts (except for the one fortnight I missed). OpenAstronomy has helped me improve the way I express myself in a satirical manner. I’ve spent quite a bit of time trying to figure out what’s the plan for my future but let’s save that story for another day.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Y0Rim-lsXAAtQbRuk6-37A.jpeg"&gt;&lt;figcaption&gt;Here’s picture of sun and its field lines to show that I’m working on astronomy related, but actually have no proper knowledge of how any of this works, cheers! 🍻&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Here’s a bit of how my last week of “officially” working on Sunkit-Pyvista went :-&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;We put a pin on the animator as it didn’t make sense for us to work on something that isn’t of more value for the first release.&lt;/li&gt;&lt;li&gt;Pfsspy field lines now allow for a custom color function to be passed while plotting.&lt;/li&gt;&lt;li&gt;All main functionality is big-free (as far as I know) and can be used efficiently without having to worry about something failing.&lt;/li&gt;&lt;li&gt;The final boss with our little project is trying to get the documentation to render 3D plots correctly and this is being handled by the mentors which is a huge load off my head.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;That’s pretty much it I guess, these last few PRs mark the end of the so called “GSoC” period. What more have I left out? I’ve spoken about everything there is to be said, we’re nearing the end of this pretty interesting journey that I had embarked on. Other than a small bit of sadness, I’ve got nothing else to say. I’ve decided to continue working on Sunkit-Pyvista as being an open-sourced contributor is all about the community and I’m doing my part in working towards that (It’s not like I was planning on leaving either way though, this is almost a part of my daily routine).&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Here’s to Sunpy and the best mentors I’ve interacted with. 🍻&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=e9ce2f5de6dc" width="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210816_0320_jeffreypaul15/</guid><pubDate>Mon, 16 Aug 2021 02:20:04 GMT</pubDate></item><item><title>GSoC Post 4</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210815_1402_ndanzanello/</link><dc:creator>ndanzanello</dc:creator><description>&lt;div&gt;&lt;p&gt;Hi! In the last weeks we have finished the Astrometry linear part programming. &lt;img alt="🙂" class="wp-smiley" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png" style="height: 1em;"&gt;&lt;/p&gt;


&lt;!-- TEASER_END --&gt;

&lt;p&gt;We added an option to solve for more pixel catalogs, which are a part of a field image. This is an important case in real world scenarios. The image below is a good illustration of this: we have a field and a lot of exposures that are used to build the final image.&lt;/p&gt;



&lt;figure class="wp-block-image"&gt;&lt;img alt="https://archive.stsci.edu/prepds/xdf/images/xdf_buildup.png" src="https://archive.stsci.edu/prepds/xdf/images/xdf_buildup.png"&gt;&lt;figcaption&gt;Source: &lt;a href="https://archive.stsci.edu/prepds/xdf/" rel="noreferrer noopener" target="_blank"&gt;https://archive.stsci.edu/prepds/xdf/&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;Also, we are moving our code to Gnuastro, so it can be a Gnuastro program. To do this, we have to follow Gnuastro conventions, so everything can be organized. Luckily, it’s very well documented how to do it, as you can see &lt;a href="https://www.gnu.org/software/gnuastro/manual/html_node/The-TEMPLATE-program.html#The-TEMPLATE-program" rel="noreferrer noopener" target="_blank"&gt;here&lt;/a&gt; and &lt;a href="https://www.gnu.org/software/gnuastro/manual/html_node/Mandatory-source-code-files.html" rel="noreferrer noopener" target="_blank"&gt;also here&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>gnuastro</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210815_1402_ndanzanello/</guid><pubDate>Sun, 15 Aug 2021 13:02:15 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #6.5 - Week 10, Final Evaluations</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210814_2236_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;div&gt;&lt;p&gt; You know, 7's my lucky number.&lt;/p&gt;
&lt;p&gt;And Happy Independence Day!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210814_2236_suyog7130/</guid><pubDate>Sat, 14 Aug 2021 21:36:00 GMT</pubDate></item><item><title>A Glimpse into my GSoC project</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210812_2028_dhruv9vats/</link><dc:creator>Dhruv Vats</dc:creator><description>&lt;div&gt;&lt;p&gt;While all my blog posts till now were kind of abstract, here I will try to show some of the technical details of the project without making it too bloated. So as a one-line description, I had to study, implement and integrate a spectral estimation technique, namely the &lt;em&gt;Multitaper Periodogram³&lt;/em&gt; (and its derivatives¹), which are used to analyze astronomical time series.&lt;/p&gt;
&lt;h5&gt;Why spectral representations?&lt;/h5&gt;&lt;p&gt;Before getting into the how of spectral analysis and its estimation, a brief sidenote on the why. Why do we even bother to study the spectral properties of a time series? It turns out, some of the determining characteristics or defining parameters associated with a certain time series are better &lt;em&gt;brought out&lt;/em&gt; in their spectral representations (frequency domain representations).&lt;/p&gt;
&lt;p&gt;As an example, the power spectral density is a common tool to try and unearth the periodic element(s) in a time series. Such spectral analysis techniques, at their core, are enabled by the Fourier Transform, and if you’d like to gain a better intuitive understanding of it, do check out &lt;a href="https://www.youtube.com/watch?v=spUNpyF58BY"&gt;this awesome video&lt;/a&gt; by &lt;a href="https://www.youtube.com/c/GrantSanderson"&gt;Grant Sanderson&lt;/a&gt; on &lt;a href="https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw"&gt;3Blue1Brown&lt;/a&gt;.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h5&gt;Multi what?&lt;/h5&gt;&lt;p&gt;Spectral analysis isn’t without its fair share of practical complications, in fact, far from it. But there have been quite a few very effective techniques to mitigate them.&lt;/p&gt;
&lt;p&gt;One of them is &lt;em&gt;tapering (&lt;/em&gt;multiplying the time series with a bell-shaped function), effective in reducing spectral leakage. Tapering a time series as a way of obtaining a spectral estimator with acceptable bias properties is an important concept. The loss of information (contained at the extremes of the time series) inherent in tapering can often be avoided either by prewhitening or by using Welch’s overlapped segment averaging.&lt;/p&gt;
&lt;p&gt;The multitaper periodogram is another approach to recover information lost due to tapering. This approach was introduced by Thomson (1982)³ and involves the use of multiple orthogonal tapers, having approximately uncorrelated spectral densities.&lt;/p&gt;
&lt;p&gt;In the multitaper method, the data is windowed or tapered, but this method differs from the traditional methods in the tapers used, which are the most band-limited functions amongst those defined on a finite time domain, and also, these tapers are orthogonal, enabling us to average the &lt;em&gt;eigenspectrum&lt;/em&gt; (spectrum estimates from individual tapers) from more than one tapers to obtain a superior estimate in terms of noise. The resulting spectrum has low leakage, low variance, and retains information contained in the beginning and end of the time series.&lt;/p&gt;
&lt;p&gt;The tapers used are the discrete prolate spheroidal sequences (DPSS), or, the Slepians (Slepian 1978)⁴.&lt;/p&gt;
&lt;h5&gt;A look at the DPSS tapers&lt;/h5&gt;&lt;p&gt;Let’s consider a time series sampled from an autoregressive process of order 4, AR(4), which has been frequently exemplified in literature¹ in similar contexts.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/657/1*h-k9Xm1CgerMQVIeKbfyOw.png"&gt;&lt;figcaption&gt;A time series sampled from an autoregressive process of order 4.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;A good way to gain an intuitive understanding of the properties of the DPSS tapers, and how they affect the time series, is to visualize the effect. Given here are the time and frequency domain representations of the tapers and the tapered time series.&lt;/p&gt;
&lt;p&gt;The first 8 tapers and the corresponding tapered time series⁵.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/645/1*SEG0OEstBuAgP5OqgnS4zA.png"&gt;&lt;/figure&gt;&lt;p&gt;This showcases the product of a windowing function and a time series quite well. Next let’s have a look at their spectral representations⁵, more specifically, their power spectrum densities (PSD).&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/1*nvqbaD08gDf1zdh9P2ljqQ.png"&gt;&lt;figcaption&gt;For this example, we took the normalized half-bandwidth product to be equal to 4 (NW = 4), resulting in 8 tapers being used. The spectral concentration in the band [-W, W] can then be seen from the plots. (Here N, the number of data points, is 1024, hence, W = 4/N = 0.003906)&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;There is a significant increase in the bias of the PSD estimates as the spectral concentration of the tapers worsens. To prevent these estimates with greater biases from affecting the final averaged estimate but still use the variance reductions they bring, we weigh the different estimates according to their spectral concentration (percentage of energy concentrated in the desired frequency band).&lt;/p&gt;
&lt;p&gt;This can be kicked up a notch by using what is called adaptive weighing, which adaptively (duh?!) combines the different estimates, calculating the weights using an iterative process.&lt;/p&gt;
&lt;h5&gt;A brief summary of the Multitaper spectral estimation&lt;/h5&gt;&lt;a href="https://medium.com/media/3f23eb5c2c41460b8793fbc2e6fbc04d/href"&gt;https://medium.com/media/3f23eb5c2c41460b8793fbc2e6fbc04d/href&lt;/a&gt;&lt;p&gt;This summary, by no means, is an exhaustive explanation of the multitapering concept. Further exploration of the topic is highly encouraged. Use the references as the starting point.&lt;/p&gt;
&lt;h5&gt;The Final Result&lt;/h5&gt;&lt;p&gt;Using all the techniques outlined here, let's see how well can this multitaper periodogram estimate the true spectrum of this auto-regressive process. Also added is the classical periodogram (also sometimes referred to as a naïve spectrum estimator because of its basic estimation process) for comparison.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/707/1*7eYiabftab1cYuMpBC4uqA.png"&gt;&lt;figcaption&gt;Here the multitaper estimate uses the adaptive weighting technique and the first 7 DPSS tapers&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;All this functionality is now implemented in &lt;a href="https://github.com/StingraySoftware/stingray"&gt;Stingray&lt;/a&gt;²&lt;/p&gt;
&lt;h5&gt;References&lt;/h5&gt;&lt;p&gt;[1]: Springford, Aaron, Gwendolyn M. Eadie, and David J. Thomson. 2020. “Improving the Lomb–Scargle Periodogram with the Thomson Multitaper.” The Astronomical Journal (American Astronomical Society) 159: 205. doi:10.3847/1538–3881/ab7fa1.&lt;/p&gt;
&lt;p&gt;[2]: Huppenkothen, Daniela, Matteo Bachetti, Abigail L. Stevens, Simone Migliari, Paul Balm, Omar Hammad, Usman Mahmood Khan, et al. 2019. “Stingray: A Modern Python Library for Spectral Timing.” The Astrophysical Journal (American Astronomical Society) 881: 39. doi:10.3847/1538–4357/ab258d.&lt;/p&gt;
&lt;p&gt;[3]: Thomson, D. J. 1982. “Spectrum Estimation and Harmonic Analysis.” IEEE Proceedings 70: 1055–1096. &lt;a href="https://ui.adsabs.harvard.edu/abs/1982IEEEP..70.1055T."&gt;https://ui.adsabs.harvard.edu/abs/1982IEEEP..70.1055T.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]: Slepian, D. 1978. “Prolate Spheroidal Wave Functions, Fourier Analysis, and Uncertainty-V: The Discrete Case.” Bell System Technical Journal (Institute of Electrical and Electronics Engineers (IEEE)) 57: 1371–1430. doi:10.1002/j.1538–7305.1978.tb02104.x&lt;/p&gt;
&lt;p&gt;[5]: D.B. Percival and A.T. Walden, Spectral Analysis for Physical Applications: Multitaper and Conventional Univariate Techniques. Cambridge, U.K.: Cambridge Univ. Press, 1993.&lt;/p&gt;
&lt;p&gt;[6]: Thomson, D. J. 1990. “Time series analysis of Holocene climate data.” Philosophical Transactions of the Royal Society of London. Series A, Mathematical and Physical Sciences (The Royal Society) 330: 601–616. doi:10.1098/rsta.1990.0041&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=25c0fe3296dd" width="1"&gt;&lt;/div&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210812_2028_dhruv9vats/</guid><pubDate>Thu, 12 Aug 2021 19:28:01 GMT</pubDate></item><item><title>astropy@GSoC Blog Post #6, Week 8&amp;9</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210809_0848_suyog7130/</link><dc:creator>Suyog Garg</dc:creator><description>&lt;div&gt;&lt;b&gt;Heads-up about the Progress of   &lt;a href="https://github.com/astropy/astropy/pull/11897"&gt;#11897&lt;/a&gt;&lt;/b&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  In summary the situation of the concerned PR a few days back was 4 types of CI   test errors, one bug and possibly a need for modification of part of the code   copied from pycdsreadme. All these have been taken care of as detailed below,   but for the numpy depreciation warnings that keep coming up. I don't think we   can do anything about the latter's persistence as of now. I shall comment more   about it on GitHub as well. &lt;/div&gt;&lt;div&gt;  &lt;ol style="text-align: left;"&gt;    &lt;li&gt;      &lt;i&gt;File not found error&lt;/i&gt;: Moritz's HW, i.e. using       &lt;span style="font-family: courier;"&gt;get_pkg_data_filename&lt;/span&gt; import,       directly took care of this.     &lt;/li&gt;    &lt;li&gt;      &lt;i&gt;Error in coord col decimal places&lt;/i&gt;: The precision of the coordinate       component columns was getting set arbitrarily, which created difference in       the output for 32-bit and 62-bit machines, and possibly between different       operating systems. This has been corrected by having a fixed number of 12       digits after decimal for &lt;b&gt;RAs,&lt;/b&gt; &lt;b&gt;DEs&lt;/b&gt; and the       latitude/longitude columns of Galactic and Ecliptic coords. This error       also relates with the Formats bug.     &lt;/li&gt;    &lt;li&gt;      &lt;span style="font-family: courier;"&gt;&lt;i&gt;SphericalRepresentation&lt;/i&gt;&lt;/span&gt;&lt;i&gt; col error&lt;/i&gt;: Now, this was a bit major issue compared to the two       above, although the solution was only 2 line changes. When the coords cols       were checked for and divided into components, the original SkyCoord col       was deleted right within the loop. This made the iteration index of the       loop to point to i+2 column after deletion, where i is the index of the       original &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; col. That is,       effectively skipping the immediate next column after the       &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; col, as it would have       receded by one place in the list. Got this fixed by popping the original       &lt;span style="font-family: courier;"&gt;SkyCoord&lt;/span&gt; col after all the       columns in the table have been iterated over. This way all       &lt;span style="font-family: courier;"&gt;object&lt;/span&gt; type columns are       converted to &lt;span style="font-family: courier;"&gt;Column&lt;/span&gt; objects       with &lt;span style="font-family: courier;"&gt;str&lt;/span&gt; values.     &lt;/li&gt;    &lt;li&gt;      &lt;i&gt;~table.tests and &lt;/i&gt;&lt;span style="font-family: courier;"&gt;&lt;i&gt;test_write&lt;/i&gt;&lt;/span&gt;&lt;i&gt; failures&lt;/i&gt;: All these errors were warnings due to depreciation of       numpy specific aliases for different Python types. Most previous tests in       Astropy appear to use these now depreciated numpy types, which raises       warnings during testing our code. I have been able to provide remedy for       majority of these by additionally using       &lt;span style="font-family: courier;"&gt;np.issubdtype(col.dtype, np.integer)&lt;/span&gt;      while checking if the columns has integer values, however, tests with       oldest supported version of all dependencies still fails. See my GitHub       comment for more info.     &lt;/li&gt;  &lt;/ol&gt;  &lt;i&gt;&lt;div&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/div&gt;The &lt;/i&gt;&lt;span style="font-family: courier;"&gt;&lt;i&gt;formats&lt;/i&gt;&lt;/span&gt;&lt;i&gt; bug&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;  This was another major problem we had stumbled upon. It took me a while to   skim through various docs and codes to find the optimum fix for this. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Our initial insight was that the difference between the Byte-By-Byte   description and the data part of the written table, when the   &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; argument is passed to the   &lt;span style="font-family: courier;"&gt;write&lt;/span&gt; function, related in some   manner to the string formatting part of the code. By first look itself, it was   evident that there isn't any provision in the writer for cases when the   columns already contain a   &lt;span style="font-family: courier;"&gt;format&lt;/span&gt; attribute, which is what is   assigned when &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; is passed, as   I had written here back then. Creating allowance for this was easy enough,   right away correcting the test outputs. Now, both the Byte-By-Byte and the   table data had the number of decimal digits, or whatever other format for that   matter, we wanted them to have. Apart from the internally created coordinate   component columns, for which the number of digits after decimal was fixed. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  It is when we want to go a step further than this and wanna truncate or   eradicate the string formatting part to obtain the column format, that we   stumble upon a road block. There are two concerns, &lt;/div&gt;&lt;div&gt;  &lt;ul style="text-align: left;"&gt;    &lt;li&gt;      If no &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; argument is       passed, &lt;span style="font-family: courier;"&gt;col.format&lt;/span&gt; will be set       to &lt;span style="font-family: courier;"&gt;None&lt;/span&gt;.     &lt;/li&gt;    &lt;li&gt;      Even if we already know the column format, say       &lt;span style="font-family: courier;"&gt;.5f&lt;/span&gt;, we still need to evaluate       the maximum size of the value strings of the column in most cases, and do       some formatting to have the format in CDS/MRT recommendation,       &lt;span style="font-family: courier;"&gt;Fx.5&lt;/span&gt;.     &lt;/li&gt;  &lt;/ul&gt;  The column &lt;span style="font-family: courier;"&gt;formats&lt;/span&gt; passed in the   formats argument are set by using the in-build Python function   &lt;span style="font-family: courier;"&gt;format&lt;/span&gt; (&lt;a href="https://docs.python.org/3/library/functions.html#format"&gt;https://docs.python.org/3/library/functions.html#format&lt;/a&gt;). For cases when no formats argument is passed, the default behavior when   writing the table data, for instance in the   &lt;span style="font-family: courier;"&gt;FixedWidth&lt;/span&gt; writer is to set the   column format to &lt;span style="font-family: courier;"&gt;''&lt;/span&gt; which is   equivalent to saying   &lt;span style="font-family: courier;"&gt;val = str(val)&lt;/span&gt;. (&lt;a href="https://docs.astropy.org/en/stable/table/construct_table.html#table-format-string"&gt;https://docs.astropy.org/en/stable/table/construct_table.html#table-format-string&lt;/a&gt;) &lt;span style="font-family: courier;"&gt;FixedWidth&lt;/span&gt; uses the maximum   length of these strings to get the column widths.   &lt;b&gt;So, there the string formatting part of the code is essential if we want to     know the correct format for columns without string values.&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  However, there may be another solution to this that can be tried in the   long-term. I was curious to know what other writers in Astropy did in such   situations when the column format needs to be given explicitly in the header   of the written table. There aren't extravagantly many such use cases, but the   FITS standard tables do have format keywords in the header as serve the   purpose well. So, looking over the Astropy FITS writer, I found the way in   which it deals with the problem of assigning column formats is by separately   defining all the formats that can be and then using a custom   &lt;span style="font-family: courier;"&gt;Column&lt;/span&gt; class which has some default   format attributes. (See:&lt;br&gt;&lt;a href="https://github.com/astropy/astropy/blob/main/astropy/io/fits/column.py"&gt;https://github.com/astropy/astropy/blob/main/astropy/io/fits/column.py&lt;/a&gt;). ASCII writers also have a custom   &lt;span style="font-family: courier;"&gt;Column&lt;/span&gt; class, but the attributes   that it currently has are exceedingly lacking to be of any use to us now. (&lt;a href="https://github.com/astropy/astropy/blob/79323de928e87827526ed8fce04986a5dd459794/astropy/io/ascii/core.py#L270"&gt;https://github.com/astropy/astropy/blob/79323de928e87827526ed8fce04986a5dd459794/astropy/io/ascii/core.py#L270&lt;/a&gt;) In the long-run, we could take motivation from the FITS writer and make   changes herein.&lt;br&gt;&lt;br&gt;&lt;i&gt;Other updates&lt;/i&gt;&lt;/div&gt;&lt;div&gt;  &lt;i&gt;&lt;br&gt;&lt;/i&gt;  &lt;div&gt;    &lt;div&gt;      I have began to work on the other two branches for Time cols and MRT       metadata resp and would have them done in some time.     &lt;/div&gt;    &lt;div&gt;      On an unrelated note, I found that the       &lt;span style="font-family: courier;"&gt;test_cds_header_from_readme.py&lt;/span&gt;      test file in       &lt;span style="font-family: courier;"&gt;&lt;a href="http://astropy.io/"&gt;astropy.io&lt;/a&gt;.ascii.tests&lt;/span&gt;      contains some CDS reading tests. It was recently modified by the 11593 PR       (&lt;a href="https://github.com/astropy/astropy/pull/11593/files"&gt;https://github.com/astropy/astropy/pull/11593/files&lt;/a&gt;). I imagine that these tests can be incorporated within test_cds.py and       then we won't perhaps have to move CDS/MRT tests to any other test file?     &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><category>Astropy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210809_0848_suyog7130/</guid><pubDate>Mon, 09 Aug 2021 07:48:00 GMT</pubDate></item><item><title>GSoC update!</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210803_0200_rashmiraj137/</link><dc:creator>Raj Rashmi</dc:creator><description>&lt;div&gt;&lt;p&gt;GSoC started four months ago and it is not just about knowing more about the open-source that made the experience great! My mentors made it way cooler than I thought it would be. I was writing my Master thesis, for the last three months and surely, it has been a super productive summer for me! The best part is I get to do things at my own pace. My project particularly hasn’t been very easy to implement. I need to bridge a Machine Learning algorithm in the existing codebase. The fun part is venturing with different notebooks and figuring out with intuition, what could be efficient in terms of computational time, efficiency, cost etc. But as of now, the struggle has been to define the problem as exactly to achieve the result. But I will keep working on finding a solution with my mentor Daniela, and trust that struggle will bring some positive construction in Stingray.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/1024/0*2GcUC2cgvKapk8Lj"&gt;&lt;/figure&gt;&lt;p&gt;The current data fit for the evaluation of likelihood happens using scipy.optimize.minimize function. However, there exists numerous ways to do this. SciPy optimize provides functions for minimizing (or maximizing) objective functions, possibly subject to constraints. It includes solvers for nonlinear problems (with support for both local and global optimization algorithms), linear programming, constrained and nonlinear least-squares, root finding, and curve fitting. The problem with the current minimization algorithm is that it converges at local minimum instead of global, i.e. it is not very robust. Recently, Machine Learning has evident development in such optimization tools. The strategy for ahead is that I will work on finding alternatives that potentially accelerate the code, makes it robust.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2d16a70cc267" width="1"&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><category>stingray</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210803_0200_rashmiraj137/</guid><pubDate>Tue, 03 Aug 2021 01:00:58 GMT</pubDate></item><item><title>GSoC - 3</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210802_0300_gagan-aryan/</link><dc:creator>Gagan Aryan</dc:creator><description>&lt;div&gt;&lt;p&gt;Hello and welcome to the first blog of GSoC phase-2. Ever faced a time when there was way too much on the plate and you find it really hard to catch up on all the work? That is pretty much how the previous two weeks were for me. With the start of the oncampus internship drive, I was finding it really hard to give manage the project. Somehow I was able to make some progress but I am yet to complete the task.&lt;/p&gt;
&lt;p&gt;I am basically trying to parse the &lt;code&gt;.bz2&lt;/code&gt; files of &lt;code&gt;HITEMP&lt;/code&gt; databases into HDF5 files in a Vaex friendly format. Currently &lt;code&gt;.bz2&lt;/code&gt; files are parsed into HDF5 files with the help of high level pandas functions. But as we already know pandas can be very memory consuming. So, I am trying to write to HDF5 files with &lt;code&gt;h5py&lt;/code&gt; library and produce HDF5 files that are vaex friendly (column based).&lt;/p&gt;
&lt;p&gt;In order to do this, I am first converting &lt;code&gt;bz2&lt;/code&gt; files to &lt;code&gt;.csv&lt;/code&gt; upon download -&amp;gt; mapping the datatypes of each of the columns -&amp;gt; writing to a HDF5 file with &lt;code&gt;h5py&lt;/code&gt;. I am currently stuck at mapping the datatypes and also trying to make optimizations with respect to the chunksize.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;This blog is just a quick update on the things that are happening currently. Once the writing to a HDF5 files is completed, look out for a detailed tutorial on the same on towardsdatascience :)&lt;/p&gt;&lt;/div&gt;</description><category>radis</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210802_0300_gagan-aryan/</guid><pubDate>Mon, 02 Aug 2021 02:00:06 GMT</pubDate></item><item><title>About my Google Summer of Code Project: Part 3</title><link>http://openastronomy.org/Universe_OA/posts/2021/08/20210801_1853_adwaitbhope/</link><dc:creator>Adwait Bhope</dc:creator><description>&lt;div&gt;&lt;p&gt;First and foremost, I celebrate the merging of the PR that brings reproject to NDCube! It defines a base-level functionality or MVP if you want to call it that, along with some relevant documentation. We also mark the release of ndcube’s 2.0 RC1. This is an important milestone since ndcube 2.0 brings significant changes, owing to the implementation of the new high-level WCS API.&lt;/p&gt;
&lt;p&gt;Our next plan of action was to extend the method to use other algorithms that reproject supports. Interpolation (the one that the above PR implements) supports multi-dimensional cubes but “adaptive” and “exact” algorithms do not. For the time being, they only work on 2D cubes containing celestial axes. So that’s what I’ve implemented them for in a new PR, which is currently under review and should hopefully get merged soon.&lt;/p&gt;
&lt;p&gt;The only problem for this PR was identifying celestial axes. We’ve taken a shortcut to solve this quickly and avoid creating a blocker, but a better implementation is due.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The NDCubeSequence PR that I talked about in the last blog post hit a few unexpected edge cases which are under work.&lt;/p&gt;
&lt;p&gt;We’re nearing the end of GSoC’s official timeline and while that is saddening, the good thing is that open source doesn’t need a GSoC timeline for contributing. I do hope that I’ll be able to tie up any loose ends before the end date, but I suppose that does not matter in the community’s bigger picture. Functional additions, bug fixes, and performance improvements are always going to be coming in for reproject, and I plan to maintain at least that bit of code (or more) in the future.&lt;/p&gt;
&lt;img alt="" height="1" src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=f6354389b27f" width="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2021/08/20210801_1853_adwaitbhope/</guid><pubDate>Sun, 01 Aug 2021 17:53:41 GMT</pubDate></item></channel></rss>