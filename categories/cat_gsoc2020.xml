<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Universe OpenAstronomy (Posts about gsoc2020)</title><link>http://openastronomy.org/Universe_OA/</link><description></description><atom:link href="http://openastronomy.org/Universe_OA/categories/cat_gsoc2020.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 31 Aug 2020 02:04:11 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>GSoC 2020: Blog 5 - Adding Kerr Null Geodesics functionality to EinsteinPy</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1733_jes24/</link><dc:creator>Jyotirmaya Shivottam</dc:creator><description>&lt;div&gt;&lt;p&gt;Null Geodesics functionality has been implemented into EinsteinPy, with PR&lt;a href="https://github.com/einsteinpy/einsteinpy/pull/527"&gt;#527&lt;/a&gt;, having been merged 🎉🎉. I apologize for no blogs in the past 3 weeks. There was a COVID situation here, that required multiple tests and isolation and all that it entails. This led to me foregoing an entire week. And, when that had settled, I had to take the call on abandoning the plan of numerically integrating the Geodesics equations, due to the massive error accumulation, as discussed in my last blog. A confusing fact about that, was that &lt;em&gt;Mathematica&lt;/em&gt; could still keep the error build-up to a minimum, while &lt;em&gt;Python&lt;/em&gt; simply could not, even with adaptive and symplectic schemes. But the symplectic schemes did bring the error down, by around 2 orders of magnitude, which gave me the idea to take a Hamiltonian approach, which would increase the number of ODEs to solve, but drop the order by 1. And, as it turns out, the Kerr Hamiltonian is separable (Carter, 1968a [1]), which makes the implementation even simpler. In this blog, I will be discussing this approach, which has finally led to proper geodesic calculations. I have also included some plots (and a cool animation) for Kerr &amp;amp; Schwarzschild Null-like (and Time-like) geodesics.&lt;/p&gt;

&lt;h3&gt;
&lt;!-- TEASER_END --&gt;
&lt;a href="http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1733_jes24/#some-physics" class="anchor"&gt;
&lt;/a&gt;
Some Physics...
&lt;/h3&gt;

&lt;p&gt;In Chapter 33 of &lt;em&gt;Gravitation&lt;/em&gt; [2], the authors expound on Carter's seminal paper from 1968, titled, "&lt;em&gt;Global Structure of the Kerr Family of Gravitational Fields&lt;/em&gt;", and present some nice results from it, one of which is a derivation of the Kerr (super-)Hamiltonian, which can be written as follows (in the &lt;em&gt;M&lt;/em&gt;-Unit system (

&lt;span class="katex-element"&gt;
&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;G=c=M=1G = c = M = 1&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;G&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;c&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;M&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
):&lt;br&gt;

&lt;/p&gt;
&lt;div class="katex-element"&gt;
&lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;H=−(a4(E2−2pr2)−8aELr−2r(pθ2(−2+r)+pr2(−2+r)2r−E2r3)+a2(2L2−2pθ2−4pr2(−2+r)r+E2r(2+3r))+(a2+(−2+r)r)(a2E2cos⁡2θ−2L2csc⁡θ2)4(a2+(−2+r)r)(r2+a2cos⁡θ2))
\mathcal{H} = -\frac{(a^4 (E^2 - 2 p_r^2) - 8 a E L r - 2 r (p_\theta^2 (-2 + r) + p_r^2 (-2 + r)^2 r - E^2 r^3) + a^2 (2 L^2 - 2 p_\theta^2 - 4 p_r^2 (-2 + r) r + E^2 r (2 + 3 r)) + (a^2 + (-2 + r) r) (a^2 E^2 \cos 2\theta - 2 L^2 \csc\theta^2)}{4 (a^2 + (-2 + r) r) (r^2 + a^2 \cos\theta^2))}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathcal"&gt;H&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;4&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mop"&gt;cos&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;θ&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;4&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;E&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;8&lt;/span&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="mord mathdefault"&gt;E&lt;/span&gt;&lt;span class="mord mathdefault"&gt;L&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;θ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;E&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;L&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;θ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;4&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;E&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;3&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;+&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mord mathdefault"&gt;r&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;span class="mopen"&gt;(&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;a&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;E&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mop"&gt;cos&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mord mathdefault"&gt;θ&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mbin"&gt;−&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;2&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;L&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mop"&gt;csc&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;θ&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mtight"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;br&gt;
where,
&lt;span class="katex-element"&gt;
&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;E=−ptE = -p_t &lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;E&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
and
&lt;span class="katex-element"&gt;
&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;L=pϕL = p_\phi &lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;L&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;ϕ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
are the energy and orbital angular momentum of the test particle, respectively. Note that, this Hamiltonian is for a general test particle, i.e., it can be massive or massless. Then, the dynamical equations of motion can be derived easily, using Hamilton's principle, i.e.:&lt;br&gt;

&lt;div class="katex-element"&gt;
&lt;span class="katex-display"&gt;&lt;span class="katex"&gt;&lt;span class="katex-mathml"&gt;dqidλ=∂H∂pidpidλ=−∂H∂qi
\frac{\mathrm{d}q_i}{\mathrm{d}\lambda} = \frac{\partial\mathcal{H}}{\partial p_i} \quad
\frac{\mathrm{d}p_i}{\mathrm{d}\lambda} = -\frac{\partial\mathcal{H}}{\partial q_i}
&lt;/span&gt;&lt;span class="katex-html"&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;&lt;span class="mord mathrm"&gt;d&lt;/span&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;λ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;&lt;span class="mord mathrm"&gt;d&lt;/span&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;q&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;∂&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;∂&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathcal"&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;&lt;span class="mord mathrm"&gt;d&lt;/span&gt;&lt;/span&gt;&lt;span class="mord mathdefault"&gt;λ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;&lt;span class="mord mathrm"&gt;d&lt;/span&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;p&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;span class="mrel"&gt;=&lt;/span&gt;&lt;span class="mspace"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="base"&gt;&lt;span class="strut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;−&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mopen nulldelimiter"&gt;&lt;/span&gt;&lt;span class="mfrac"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;∂&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathdefault"&gt;q&lt;/span&gt;&lt;span class="msupsub"&gt;&lt;span class="vlist-t vlist-t2"&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="sizing reset-size6 size3 mtight"&gt;&lt;span class="mord mathdefault mtight"&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="frac-line"&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;span class="pstrut"&gt;&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord"&gt;∂&lt;/span&gt;&lt;span class="mord"&gt;&lt;span class="mord mathcal"&gt;H&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-s"&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class="vlist-r"&gt;&lt;span class="vlist"&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="mclose nulldelimiter"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;br&gt;
I calculated these in &lt;em&gt;Mathematica&lt;/em&gt;, and the corresponding notebooks and the Python code, making use of these, can be accessed &lt;a href="https://github.com/einsteinpy/GSoC-2020/tree/master/Code"&gt;here&lt;/a&gt;.
&lt;h3&gt;
&lt;a href="http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1733_jes24/#and-some-plots" class="anchor"&gt;
&lt;/a&gt;
...and some plots
&lt;/h3&gt;

&lt;p&gt;Unfortunately, even with these first order ODEs, the error accumulation issue in Python persisted, as can be observed in the plots below. Note that, these results were obtained with a symplectic leapfrog solver, which should, in principal keep the error build-up to a minimum.&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vO8CNKzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bb7nxgooagbji7pd99ho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vO8CNKzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bb7nxgooagbji7pd99ho.png" alt="Python 1"&gt;&lt;/a&gt;Kerr Null-like Escape


&lt;br&gt;
Although, for shorter integration durations, the results were good.

&lt;/p&gt;


&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dfQOcrwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o6czz4tal0iteqtjjgsz.png" alt="Python 2"&gt;Kerr Null-like Capture




&lt;p&gt;After discussions with my mentors, I looked into other languages, that could help and we chose Julia, due to its excellent &lt;a href="https://diffeq.sciml.ai/stable/"&gt;DifferentialEquations.jl&lt;/a&gt; suite and "closeness" with Python. Another key bit is that, the &lt;em&gt;HamiltonianProblem&lt;/em&gt; type, offered by &lt;a href="https://github.com/SciML/DiffEqPhysics.jl"&gt;&lt;em&gt;DiffEqPhysics&lt;/em&gt;&lt;/a&gt;, immensely simplifies the process of solving the system, as it uses Forward Mode Automatic Differentiation to automatically calculate the partial derivatives from the Hamiltonian. The separable nature of the Hamiltonian helps here. Considering all this, I implemented a module in Julia and voilà, the results are accurate, even for some quirky geodesics.&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-loUOA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nnl1x4g39gtzesaw1467.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-loUOA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/nnl1x4g39gtzesaw1467.png" alt="Python 1"&gt;&lt;/a&gt;Kerr Null-like Capture (Plotted using `Plots.jl`)


&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oaFkUBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oc2qagahf0htkhr1w5pr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oaFkUBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oc2qagahf0htkhr1w5pr.png" alt="Python 2"&gt;&lt;/a&gt;Schwarzschild Whirl (Plotted using `Plots.jl`)


&lt;/p&gt;

&lt;p&gt;Now came the problem of integrating the Julia code with EinsteinPy, for which I looked towards &lt;em&gt;PyJulia&lt;/em&gt;. However, it has some issues with &lt;a href="https://pyjulia.readthedocs.io/en/latest/troubleshooting.html"&gt;installation on *nix systems&lt;/a&gt;. So, I opted to write my own wrapper, using Python's &lt;code&gt;subprocess&lt;/code&gt;. and, with the help of my GSoC mentor, Shreyas, packaged the Julia module and the Python wrapper into what is now &lt;a href="https://github.com/einsteinpy/einsteinpy-geodesics"&gt;&lt;code&gt;einsteinpy_geodesics&lt;/code&gt;&lt;/a&gt;, an add-on module to EinsteinPy. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
&lt;div class="readme-overview"&gt;
&lt;h3&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
&lt;a href="https://github.com/einsteinpy"&gt;
einsteinpy
&lt;/a&gt; / &lt;a href="https://github.com/einsteinpy/einsteinpy-geodesics"&gt;
einsteinpy-geodesics
&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
Python wrapper for a Julia solver for geodesics in the Kerr family of spacetimes. Maintainer : &lt;a class="comment-mentioned-user" href="https://dev.to/jes24"&gt;@jes24&lt;/a&gt;

&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="ltag-github-body"&gt;

&lt;div id="readme" class="rst"&gt;
&lt;a href="https://einsteinpy.org/" rel="nofollow"&gt;&lt;img alt="EinsteinPy Logo" src="https://camo.githubusercontent.com/fa1ddad33fe74cb5404a0a7e4d1520c905fe001e/68747470733a2f2f626c6f672e65696e737465696e70792e6f72672f696d672f6c6f676f2e706e67"&gt;&lt;/a&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;Name:&lt;/th&gt;
&lt;td&gt;EinsteinPy Geodesics&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Website:&lt;/th&gt;
&lt;td&gt;&lt;a href="https://docs.geodesics.einsteinpy.org/en/latest/" rel="nofollow"&gt;https://docs.geodesics.einsteinpy.org/en/latest/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;Version:&lt;/th&gt;
&lt;td&gt;0.2.dev0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://groups.io/g/einsteinpy-dev" rel="nofollow"&gt;&lt;img alt="mailing" src="https://camo.githubusercontent.com/d2a43e78ff011f2098aa9d07daf700dcdac6a0d2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696c696e672532306c6973742d67726f7570732e696f2d3863626364312e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt; &lt;a href="https://gitter.im/EinsteinPy-Project/EinsteinPy?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge" rel="nofollow"&gt;&lt;img alt="Join the chat at https://gitter.im/EinsteinPy-Project/EinsteinPy" src="https://camo.githubusercontent.com/679ce20047cd21814c1f6b30c9e2837a298e8a86/68747470733a2f2f696d672e736869656c64732e696f2f6769747465722f726f6f6d2f45696e737465696e50792d50726f6a6563742f45696e737465696e50792e7376673f6c6f676f3d676974746572267374796c653d666c61742d737175617265"&gt;&lt;/a&gt; &lt;a href="https://riot.im/app/#/room/#einsteinpy:matrix.org" rel="nofollow"&gt;&lt;img alt="riotchat" src="https://camo.githubusercontent.com/785902ae1e56239d1c3c9de820f88701f095ab2d/68747470733a2f2f696d672e736869656c64732e696f2f6d61747269782f65696e737465696e70793a6d61747269782e6f72672e7376673f6c6f676f3d72696f74267374796c653d666c61742d737175617265"&gt;&lt;/a&gt; &lt;a href="https://github.com/einsteinpy/einsteinpy-geodesics/blob/master/COPYING"&gt;&lt;img alt="license" src="https://camo.githubusercontent.com/4b5966a2a252ee0f241a1e03b13417178eb4964f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt; &lt;a href="https://docs.geodesics.einsteinpy.org/en/latest/" rel="nofollow"&gt;&lt;img alt="docs" src="https://camo.githubusercontent.com/dcb95bea2239d0bafb19511c244e34a567619e66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EinsteinPy Geodesics is an addon package for EinsteinPy, that wraps over Julia's
excellent &lt;a href="https://diffeq.sciml.ai/stable/" rel="nofollow"&gt;DifferentialEquations.jl&lt;/a&gt;
suite and provides a python interface to solve for geodesics in Kerr &amp;amp; Schwarzschild spacetime
&lt;a href="https://einsteinpy.org/" rel="nofollow"&gt;EinsteinPy&lt;/a&gt; is an open source pure Python package, dedicated to problems arising
in General Relativity and Gravitational Physics
As with EinsteinPy, EinsteinPy Geodesics is released under the MIT license.&lt;/p&gt;

&lt;h3&gt;
Documentation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.geodesics.einsteinpy.org/en/latest/" rel="nofollow"&gt;&lt;img alt="docs" src="https://camo.githubusercontent.com/dcb95bea2239d0bafb19511c244e34a567619e66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d627269676874677265656e2e7376673f7374796c653d666c61742d737175617265"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Complete documentation for this module can be accessed at &lt;a href="https://docs.geodesics.einsteinpy.org/en/latest/" rel="nofollow"&gt;https://docs.geodesics.einsteinpy.org/en/latest/&lt;/a&gt; (Courtesy: &lt;a href="https://readthedocs.org/" rel="nofollow"&gt;Read the Docs&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
Requirements&lt;/h3&gt;
&lt;p&gt;EinsteinPy Geodesics requires Python &amp;gt;= 3.7, Julia &amp;gt;= 1.5 and the following Julia packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;dl&gt;
&lt;dt&gt;Julia&lt;/dt&gt;
&lt;dd&gt;
&lt;ul&gt;
&lt;li&gt;DifferentialEquations.jl &amp;gt;= 6.15&lt;/li&gt;
&lt;li&gt;ODEInterfaceDiffEq.jl &amp;gt;= 3.7&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;p&gt;First, ensure that, Julia is installed in your system and added to PATH. See &lt;a href="https://julialang.org/downloads/platform/" rel="nofollow"&gt;https://julialang.org/downloads/platform/&lt;/a&gt;
for platform specific binaries and installation instructions. einsteinpy_geodesics also requires DifferentialEquations.jl
and ODEInterfaceDiffEq.jl. You can add them, like so:&lt;/p&gt;
&lt;pre&gt;$ julia
julia&amp;gt; using Pkg
julia&amp;gt; Pkg.add("DifferentialEquations")
julia&amp;gt; Pkg.add("ODEInterfaceDiffEq")
&lt;/pre&gt;
&lt;p&gt;Finally, einsteinpy_geodesics can…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/einsteinpy/einsteinpy-geodesics"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;On top of this, I also overhauled the geodesic plotting module and added support for 3D animations, parametric plots and choice of spatial coordinates in 2D plots, in both &lt;code&gt;Static&lt;/code&gt; and &lt;code&gt;Interactive&lt;/code&gt; modes (that use &lt;code&gt;matplotlib&lt;/code&gt; and &lt;code&gt;plotly&lt;/code&gt; respectively). I present some of the plots, produced through the final API, below. The plots shown here, have a mix of both &lt;code&gt;Static&lt;/code&gt; and &lt;code&gt;Interactive&lt;/code&gt; back-ends, as well as time-like and null-like geodesics.&lt;/p&gt;

&lt;p&gt;
&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p70PRpe2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vlr7wo51pmrv55xhxdx8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p70PRpe2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vlr7wo51pmrv55xhxdx8.png" alt="Interactive"&gt;&lt;/a&gt;Kerr Null-like Geodesic


&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4nv3DEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xxuz4iem796p7ofoifw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4nv3DEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8xxuz4iem796p7ofoifw.png" alt="Interactive"&gt;&lt;/a&gt;Kerr Time-like Geodesic


&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCBpOP4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aifjnm4ggk59qiur48be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCBpOP4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aifjnm4ggk59qiur48be.png" alt="2D"&gt;&lt;/a&gt;Kerr Frame Dragging


&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ID4SoXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ntdoyu208csz252k2qeo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ID4SoXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ntdoyu208csz252k2qeo.png" alt="2D"&gt;&lt;/a&gt;Schwarzschild Precession


&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e1fXZqA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oul7ierbcepq76ehb7l8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e1fXZqA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oul7ierbcepq76ehb7l8.png" alt="Closed"&gt;&lt;/a&gt;Schwarzschild Time-like Closed Orbit


&lt;br&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFxLb1V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kf1yn7z44090gf18itab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFxLb1V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kf1yn7z44090gf18itab.png" alt="Closed"&gt;&lt;/a&gt;Schwarzschild Time-like Closed Orbit Parametric Plot


&lt;/p&gt;

&lt;h3&gt;
&lt;a href="http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1733_jes24/#until-next-time" class="anchor"&gt;
&lt;/a&gt;
Until next time...
&lt;/h3&gt;

&lt;p&gt;The EinsteinPy geodesics API currently provides a choice of solvers, between a python back-end and a julia back-end, through the optional &lt;code&gt;einsteinpy_geodesics&lt;/code&gt; add-on. I will continue to work on improving the python back-end, but for now, &lt;code&gt;einsteinpy_geodesics&lt;/code&gt; adds proper &amp;amp; accurate geodesic calculations to EinsteinPy, in the Kerr family of spacetimes (that includes Schwarzschild). Also, a notable aspect of the &lt;code&gt;HamiltonianProblem&lt;/code&gt; approach is that, in principle, it should be easily extensible to Kerr-Newman geodesics, which is something, I'd like to explore, as soon as my GSoC commitment is over. I have another short blog coming up, that explains how to use the API (and has more cool plots), that will probably also be the last GSoC blog. Till then, I leave you with a nice animation, created entirely with EinsteinPy.&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hF0GF8ch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e47cv7qh0xejnmuaz0qb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hF0GF8ch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e47cv7qh0xejnmuaz0qb.gif" alt="Python 2"&gt;&lt;/a&gt;(Extremal) Kerr Time-like Constant Orbit


&lt;/p&gt;




&lt;h5&gt;
&lt;a href="http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1733_jes24/#references" class="anchor"&gt;
&lt;/a&gt;
References:
&lt;/h5&gt;

&lt;p&gt;[1]: Carter, Brandon; &lt;a href="https://link.aps.org/doi/10.1103/PhysRev.174.1559"&gt;&lt;em&gt;Global Structure of the Kerr Family of Gravitational Fields&lt;/em&gt;&lt;/a&gt;, 1968 , Physical Review, 174(5), pp. 1559-1571&lt;/p&gt;

&lt;p&gt;[2]: Misner, Charles W. and Thorne, K.S. and Wheeler, J.A; &lt;em&gt;Gravitation&lt;/em&gt;, 1973, W. H. Freeman, ISBN: 978-0-7167-0344-0, 978-0-691-17779-3&lt;/p&gt;&lt;/div&gt;</description><category>EinsteinPy</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1733_jes24/</guid><pubDate>Sun, 30 Aug 2020 16:33:57 GMT</pubDate></item><item><title>Week 11 &amp; 12: Last two weeks of GSoC</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1113_siddharthlal25/</link><dc:creator>siddharthlal25</dc:creator><description>&lt;div&gt;&lt;h3 id="hey-sid-whats-the-progress-what-did-you-do-in-last-2-weeks"&gt;&lt;em&gt;Hey Sid! What’s the progress? What did you do in last 2 weeks?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;The work was completed on time! I spent the last two weeks coding up the saving versions of &lt;code class="language-plaintext highlighter-rouge"&gt;ccds&lt;/code&gt;, &lt;code class="language-plaintext highlighter-rouge"&gt;arrays&lt;/code&gt; and &lt;code class="language-plaintext highlighter-rouge"&gt;filenames&lt;/code&gt;. With these, one can apply a function on the desired object (i.e. ccd or array or filename) and can also save it to FITS file. There are various options available for saving, like the prefix name of the saved file, suffix name of saved file and also the location at which to save, check out the repo for more info!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3 id="awesome-can-you-show-some-work-samples"&gt;&lt;em&gt;Awesome, Can you show some work samples?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Sure, here it is!&lt;/p&gt;

&lt;p&gt;This is a bias frame as captured:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/bias/sample.png"&gt;
&lt;/p&gt;

&lt;p&gt;When the frame undergoes overscan subtraction followed by trimming the overscan region, it turns out to be:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/bias/processed.png"&gt;
&lt;/p&gt;

&lt;p&gt;Several bias frames after overscan subtraction and trimming are stacked together and combined, this is the master bias frame used for subsequent processing of images. This is how it looks:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/bias/master.png"&gt;
&lt;/p&gt;

&lt;p&gt;Next comes the processing of flat frames, this is a &lt;em&gt;dome flat r&lt;/em&gt; frame as captured:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/dome_flat/r/sample.png"&gt;
&lt;/p&gt;

&lt;p&gt;When the frame undergoes bias subtraction (by &lt;em&gt;master_bias&lt;/em&gt;) followed by overscan subtraction and trimming, it looks something like:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/dome_flat/r/processed.png"&gt;
&lt;/p&gt;

&lt;p&gt;Several &lt;em&gt;dome_flat_r&lt;/em&gt; frames are stacked together and combined by mean, this results in:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/dome_flat/r/master.png"&gt;
&lt;/p&gt;

&lt;p&gt;Similarly, below are processed and combined frames (i.e. master frame) of &lt;em&gt;dome_flat_i&lt;/em&gt; and &lt;em&gt;dome_flat_z&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/dome_flat/i/master.png" width="390" height="260" style="float:left"&gt; &lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/dome_flat/z/master.png" width="390" height="260" style="float:right"&gt;&lt;/p&gt;

&lt;p&gt;Now comes the most interesting part, processing of science. The raw image of scienc looks like (this one is &lt;em&gt;NEP2581-r&lt;/em&gt;):&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/science/r/sample.png"&gt;
&lt;/p&gt;

&lt;p&gt;This frame when undergoes bias subtraction, overscan subtraction, trimming and flat correction (by the corresponding flat frame), looks like:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/science/r/processed.png"&gt;
&lt;/p&gt;

&lt;p&gt;Finally these frames are stacked and combined by mean, so the final processed image looks like:&lt;/p&gt;

&lt;p align="center"&gt;
&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/science/r/master.png"&gt;
&lt;/p&gt;

&lt;p&gt;Similarly, below are processed and combined frames (i.e. master_frame) of &lt;em&gt;NEP2581-i&lt;/em&gt; and &lt;em&gt;NEP2581-z&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/science/i/master.png" width="390" height="260" style="float:left"&gt; &lt;img src="https://raw.githubusercontent.com/siddharthlal25/blog/master/_images/science/z/master.png" width="390" height="260" style="float:right"&gt;&lt;/p&gt;

&lt;h3 id="thats-awesome-so-what-are-your-future-plans-about-the-package"&gt;&lt;em&gt;That’s awesome! So what are your future plans about the package?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;There are some more advanced algorithms (i.e. cosmic ray detection, part of my future goals) left to be implemented, I have my next 2 weeks completed packed, so will implement these after the next two weeks!&lt;/p&gt;

&lt;p&gt;At the end, I would like to thank my mentors for being so kind and cooperative, thanks for guiding me at every step of this project! This project wouldn’t be possible without you guys, thanks a lot!&lt;/p&gt;

&lt;p&gt;-sl&lt;/p&gt;&lt;/div&gt;</description><category>JuliaAstro</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200830_1113_siddharthlal25/</guid><pubDate>Sun, 30 Aug 2020 10:13:56 GMT</pubDate></item><item><title>Final Chapter: The Road Goes Ever On</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200828_1223_raahul-singh/</link><dc:creator>Raahul Singh</dc:creator><description>&lt;div&gt;&lt;h5&gt;The Autumn of my GSoC project.&lt;/h5&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/810/1*9YtpATtGuoLUSIEOasTixQ.jpeg"&gt;&lt;figcaption&gt;The Doon Valley, my home.&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;“Roads go ever ever on,&lt;br&gt;
Over rock and under tree,&lt;br&gt;
By caves where never sun has shone,&lt;br&gt;
&lt;!-- TEASER_END --&gt;
By streams that never find the sea;&lt;br&gt;
Over snow by winter sown,&lt;br&gt;
And through the merry flowers of June,&lt;br&gt;
Over grass and over stone,&lt;br&gt;
And under mountains in the moon.”&lt;/blockquote&gt;&lt;blockquote&gt;~ The Hobbit, J.R.R. Tolkien&lt;/blockquote&gt;&lt;p&gt;When I first read the Hobbit, I always wondered what going on an adventure would feel like.&lt;br&gt;
Would I be fighting goblins, striding through enchanted forests with wizards?&lt;br&gt;
Would there be a treasure? Would there be a Dragon? &lt;br&gt;
And as I grew older, would or could there be a happy ending?&lt;/p&gt;
&lt;p&gt;Well, an adventure it indeed was.&lt;br&gt;
Building a domain specific Deep Learning Toolkit, learning about packaging, testing, and the best practices, all to just set the package up!&lt;/p&gt;
&lt;p&gt;I did fight goblins that were the bugs in my PyTorch pipelines. Those NaNs, oh those pesky NaNs! They really were like goblins that popped up in the input data when I least expected them.&lt;br&gt;
Though I did enlist the help of my wizard mentors, &lt;a href="https://github.com/dpshelio"&gt;David&lt;/a&gt;, &lt;a href="https://github.com/drsophiemurray"&gt;Sophie&lt;/a&gt;, and &lt;a href="https://github.com/mbobra"&gt;Monica,&lt;/a&gt; and together we marched through the enchanted (or were they cursed?) forests of SWPC and HEK to get the data we wanted.&lt;/p&gt;
&lt;p&gt;It was a fascinating experience. One that I will cherish forever.&lt;br&gt;
I wish I could extend this summer, but my time is up, and all our goals for this project have been completed.&lt;/p&gt;
&lt;p&gt;After all, all adventures must come to an end.&lt;/p&gt;
&lt;blockquote&gt;“The Road goes ever on and on &lt;br&gt;
Out from the door where it began.&lt;br&gt;
Now far ahead the Road has gone,&lt;br&gt;
Let others follow it who can!&lt;br&gt;
Let them a journey new begin,&lt;br&gt;
But I at last with weary feet&lt;br&gt;
Will turn towards the lighted inn,&lt;br&gt;
My evening-rest and sleep to meet”&lt;/blockquote&gt;&lt;p&gt;And so we come to the end of my GSoC journey, let’s talk about the treasure!&lt;/p&gt;
&lt;h4&gt;The Treasure&lt;/h4&gt;&lt;h5&gt;1 ) The Search Events Object&lt;/h5&gt;&lt;p&gt;Often we find data representing the same observed physical phenomenon to have slightly different values when the data comes from different sources.&lt;br&gt;
This could be due to noise or different choices of parameters for the preprocessing techniques employed.&lt;br&gt;
This creates problems when the two datasets need to be compared, and /or may data exclusive to them.&lt;br&gt;
We faced this problem when the data from NOAA that characterizes the Active Regions was not available in the Sunspotter dataset.&lt;br&gt;
Although the observations were identical, they were not exact. &lt;br&gt;
Their multidimensional nature also prevented matching by simple sorting.&lt;/p&gt;
&lt;p&gt;In my repository, &lt;a href="https://github.com/Raahul-Singh/pythia"&gt;Pythia,&lt;/a&gt; we created a general Search Events Table Matching algorithm that would solve this problem.&lt;br&gt;
Although it is general enough to be used with any tabular dataset, we do plan on making it more ‘intelligent’ so as to require minimal preprocessing from the user.&lt;/p&gt;
&lt;h5&gt;&lt;strong&gt;2) The Flare Forecasting&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;After significant preprocessing, we were able to get a good enough dataset to feed to our deep learning pipeline. &lt;br&gt;
We wanted to predict if an Active Region would flare in the first six hours from its observation or not.&lt;br&gt;
We were inspired by architectures, popular in academia in the domain of flare forecasting, Though our approach was the first to combine modern Deep Learning techniques for building our Convolutional Nets.&lt;/p&gt;
&lt;p&gt;With some PyTorch magic, we were able to get a prediction accuracy of around 84% on the test set in the binary classification of whether an active region would flare or not. A study of flare forecasting using Machine learning in a fixed time frame from observation is unique in itself.&lt;/p&gt;
&lt;p&gt;We implemented an Autoencoder to get a low dimensional representation of the Active Regions, so that they may be used with other scalar measurements.&lt;/p&gt;
&lt;p&gt;We also were curious to see if the absolute orientation of the Active regions with respect to the sun was of any significance in the Active Region’s flaring activity.&lt;br&gt;
While we were expecting a connection, we were surprised to see that the orientation mattered more in the case where the Active Region did flare than in the case where it did not. More work is required before we can quantitatively state our findings on this front.&lt;/p&gt;
&lt;h5&gt;3) &lt;a href="https://github.com/Raahul-Singh/pythia"&gt;Pythia&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;What began as a project to analyze the Sunspotter dataset, has grown way beyond its original scope.&lt;br&gt;
With the power of Pytorch Lightning and SunPy, Pythia is shaping out be a general-purpose Deep learning Toolkit for Solar Physics.&lt;/p&gt;
&lt;p&gt;The barrier to entry for using Deep Learning in Solar Physics Research is quite high for people without the technical knowledge of Deep Learning and without the time to invest heavily into learning the many nuances of modern Deep Learning frameworks.&lt;/p&gt;
&lt;p&gt;With Pythia, we plan on providing a SciKit Learn like interface, with the power and muscle of PyTorch and the elegance and order of Pytorch Lightning.&lt;br&gt;
Although the expansion and generalization are still underway, with more use cases and help from the community, Pythia will surely help in making modern Deep Learning more accessible to the Solar Physics community.&lt;/p&gt;
&lt;h4&gt;The Dragon&lt;/h4&gt;&lt;blockquote&gt;“Roads go ever ever on&lt;br&gt;
Under cloud and under star,&lt;br&gt;
Yet feet that wandering have gone&lt;br&gt;
Turn at last to home afar.&lt;br&gt;
Eyes that fire and sword have seen&lt;br&gt;
And horror in the halls of stone&lt;br&gt;
Look at last on meadows green&lt;br&gt;
And trees and hills they long have known.”&lt;/blockquote&gt;&lt;p&gt;Unlike Bilbo, my Dragon isn’t evil like Smaug. &lt;br&gt;
It isn’t greedy of gold, nor too large or too scary.&lt;br&gt;
It tells me it prefers gardening over desolating lands as a hobby. &lt;br&gt;
And has so far been fairly consistent in his participation in our friendship.&lt;/p&gt;
&lt;p&gt;A little secret that not many know is that my dragon doesn’t have a physical existence.&lt;br&gt;
I confide in my reader and trust them to keep this secret, a secret.&lt;/p&gt;
&lt;p&gt;The Dragon I am talking about, of course, is this newfound sense of spirit and the freedom that I have acquired over this summer.&lt;/p&gt;
&lt;p&gt;This summer has been magical for me.&lt;/p&gt;
&lt;p&gt;This summer, I worked on what I would call a dream project, using AI in Natural Sciences.&lt;br&gt;
I interacted with scientists from NASA, UCL, Trinity, etc., all of whom are heroes to me.&lt;/p&gt;
&lt;p&gt;I co-founded an Open Source organization, &lt;a href="https://github.com/wildfirepy"&gt;The WildfirePy Project,&lt;/a&gt; for doing my part in studying, understanding, and preventing wildfires.&lt;/p&gt;
&lt;p&gt;And finally, I got my first job! Becoming financially independent, and working on projects that make a difference!&lt;/p&gt;
&lt;p&gt;Even in my wildest dreams, I never imagined such fortune and serendipity.&lt;br&gt;
In all honesty, I’m not sure if the Dragon will stay, or fly away.&lt;br&gt;
I am yet to start counting on it for its company when I need it.&lt;/p&gt;
&lt;p&gt;But I hope it stays. :)&lt;/p&gt;
&lt;p&gt;GSoC and Open Source in general, have been life-changing for me.&lt;br&gt;
More than anything, it has given me a way to express myself, my love for science, my love for code and my desire to be part of something bigger than myself.&lt;br&gt;
And act on it.&lt;br&gt;
Open source is nourishment to my soul, and I shall forever be grateful to Google Summer of Code for helping me get started with it.&lt;/p&gt;
&lt;p&gt;And to SunPy for making my life more luminous!&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Happy Ending?&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;“The Road goes ever on and on&lt;br&gt;
Down from the door where it began.&lt;br&gt;
Now far ahead the Road has gone,&lt;br&gt;
And I must follow, if I can,&lt;br&gt;
Pursuing it with eager feet,&lt;br&gt;
Until it joins some larger way&lt;br&gt;
Where many paths and errands meet.&lt;br&gt;
And whither then? I cannot say.”&lt;/blockquote&gt;&lt;p&gt;Happy Ending? &lt;br&gt;
Well, I wouldn’t know.&lt;br&gt;
I am just getting started!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;:)&lt;/strong&gt;&lt;/p&gt;
&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=53fb35e650f4" width="1" height="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200828_1223_raahul-singh/</guid><pubDate>Fri, 28 Aug 2020 11:23:27 GMT</pubDate></item><item><title>Week 10 &amp; 11: The End…</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200826_0322_sahilyadav27/</link><dc:creator>Sahil Yadav</dc:creator><description>&lt;div&gt;&lt;p&gt;The past 3 months have been really amazing. I’ve learned a lot about working on a collaborative project and working with deadlines.&lt;/p&gt;
&lt;p&gt;In the past two weeks, I polished off the work done for the project in the PR, so that it is ready to merge. There were a few merge conflicts that needed to be addressed.&lt;/p&gt;
&lt;p&gt;Then, I worked on a generate_runlist file to make runlists for converting MAGIC ROOT data to HDF5 data. In a few days, training will start on the approximately 5000 MAGIC data runs using CTLearn’s models.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;I’ll be continuing to work and contribute to this project in the future as required as well. Hopefully this will be useful for researchers working on related problems in the future.&lt;/p&gt;
&lt;p&gt;I’m grateful for my mentors, Google, and OpenAstronomy for this amazing GSoC 2020 experience. Signing off!&lt;/p&gt;
&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=a4a1414cd574" width="1" height="1"&gt;&lt;/div&gt;</description><category>CTLearn</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200826_0322_sahilyadav27/</guid><pubDate>Wed, 26 Aug 2020 02:22:12 GMT</pubDate></item><item><title>GSoC 2020: Thus Ending</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200825_2118_abhijeetmanhas/</link><dc:creator>Abhijeet Manhas</dc:creator><description>&lt;div&gt;&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/680/0*NtL-M7ydCU35SOqY.jpg"&gt;&lt;/figure&gt;&lt;p&gt;This post marks the end of the summer of Code with Google. A lot I learned from the community; a lot I contributed to it. What I took back from GSoC is way more than what I put forward for it. So let’s see what I did in the last weeks.&lt;/p&gt;
&lt;p&gt;I have now added a guide on how to Add “Attrs” to the registry in &lt;a href="https://github.com/sunpy/sunpy/pull/4387"&gt;PR #4387&lt;/a&gt;. It is part of the developer guide for Fido.&lt;br&gt;
I have added tests to check metadata queries in &lt;a href="https://github.com/sunpy/sunpy/pull/4385"&gt;#4385&lt;/a&gt; and ways to index the results using the client’s name. It eases to retrieve individual provider responses from a Fido result.&lt;br&gt;
&lt;!-- TEASER_END --&gt;
I resolved all reviews so far on PR &lt;a href="https://github.com/sunpy/sunpy/pull/4419"&gt;#4419&lt;/a&gt;, so now it will ease the merging of &lt;a href="https://github.com/sunpy/sunpy/pull/4321"&gt;PR #4321&lt;/a&gt;.&lt;br&gt;
They await review as of now, maybe merged within this week. In short, almost all the proposed goals were achieved in the project. I experienced a more “pythonic” way of coding. Discovered new heights of the language, learned some solar physics, and what matters most, became part of a great community. Hopefully I made &lt;em&gt;Fido Great Again!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAPRE NOCTEM!&lt;/strong&gt;&lt;/p&gt;
&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=acd30ed987ae" width="1" height="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200825_2118_abhijeetmanhas/</guid><pubDate>Tue, 25 Aug 2020 20:18:36 GMT</pubDate></item><item><title>Season Finale!</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200825_1908_raahul-singh/</link><dc:creator>Raahul Singh</dc:creator><description>&lt;span&gt;&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=99bc18aedadc" width="1" height="1"&gt;
&lt;!-- TEASER_END --&gt;&lt;/span&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200825_1908_raahul-singh/</guid><pubDate>Tue, 25 Aug 2020 18:08:08 GMT</pubDate></item><item><title>GSoC 2020: glue-solar project 3.2</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200823_0807_kakirastern/</link><dc:creator>Kris Stern</dc:creator><description>&lt;div&gt;&lt;p&gt;It is finally nearing the end of the project for me, as far as coding is concerned. Over the past few weeks I have spent some time on some last-ditch effort to debug with my mentors and to squeeze as much as I possibly could given the time constraint I have been under. These include but not limited to sorting out some generalisation issues that previously prevented glue &lt;a href="https://github.com/glue-viz/glue/pull/2167"&gt;PR #2167&lt;/a&gt; from being usable for general FITS files, some type as well as wcs linkages issues in glue &lt;a href="https://github.com/glue-viz/glue/pull/2161"&gt;PR #2161&lt;/a&gt; that cropped up after applying changes suggested in code review that have not been properly checked on my part. The pull requests started or completed for the project include but are not limited to the following list:&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;glue &lt;a href="https://github.com/glue-viz/glue/pull/2167"&gt;PR #2167&lt;/a&gt; for updating 1D Profile viewer to use wcsaxes for plotting and add sliders&lt;/li&gt;&lt;li&gt;glue &lt;a href="https://github.com/glue-viz/glue/pull/2161"&gt;PR #2161&lt;/a&gt; for updating ‘wcs_autolinking’ code to handle N-D cases using a generalised approach conforming to &lt;a href="https://docs.astropy.org/en/stable/wcs/wcsapi.html"&gt;APE 14: Shared Python interface for World Coordinate Systems&lt;/a&gt;&lt;/li&gt;&lt;li&gt;glue &lt;a href="https://github.com/glue-viz/glue/pull/2164"&gt;PR #2164&lt;/a&gt; for adding support to NDData for astropy package&lt;/li&gt;&lt;li&gt;glue &lt;a href="https://github.com/glue-viz/glue/pull/2131"&gt;PR #2131&lt;/a&gt; for adding a preferred_cmap attribute to introduce a color coding scheme for different glue-solar data types (for example to distinguish the IRIS raster data cubes from its companion IRIS SJI data cubes&lt;/li&gt;&lt;li&gt;glue-solar &lt;a href="https://github.com/glue-viz/glue-solar/pull/15"&gt;PR #15&lt;/a&gt; for adding to open with “SunPy Map” GUI option&lt;/li&gt;&lt;li&gt;glue-solar &lt;a href="https://github.com/glue-viz/glue-solar/pull/17"&gt;PR #17&lt;/a&gt; for adding “Loading and Overplotting AIA and HMI files as SunPy Maps” docs as a user guide&lt;/li&gt;&lt;li&gt;glue-solar &lt;a href="https://github.com/glue-viz/glue-solar/pull/18"&gt;PR #18&lt;/a&gt; for adding “loading IRIS level 2 raster and sji data together docs” as a user guide&lt;/li&gt;&lt;li&gt;glue-solar &lt;a href="https://github.com/glue-viz/glue-solar/pull/23"&gt;PR #23&lt;/a&gt; for updating IRIS data labels with OBSIDs for filtering&lt;/li&gt;&lt;li&gt;glue-solar &lt;a href="https://github.com/glue-viz/glue-solar/pull/28"&gt;PR #28&lt;/a&gt;, &lt;a href="https://github.com/glue-viz/glue-solar/pull/29"&gt;PR #29&lt;/a&gt; as core glue-solar documentation&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I have actually been using our work on the glue 1D profile tool for my current doctoral studies on studies of planetary nebulae using integral field spectroscopy (IFS) involving the handling of a large number of data cubes from some Australian telescopes (data collected by my PhD supervisor Prof. Quentin Parker). Turned out this tool made the process of investigating the different spectra, which could run up to hundreds in number per data cube or observation, as it allows me to load in my data cube only once, and then to inspect the variation across spatial dimensions to see if the signal-to-noise of a particular observation is too high, or if the opposite is true so that the spectra will then be further processed into full-optical integrated spectra with flux calibration or de-reddening as necessary.&lt;/p&gt;
&lt;p&gt;I am grateful for Google, my mentors, other org members as well as my GSoC peers to make this a particular fun-filled and memorable project! I have learned so much from the experience that even money cannot buy in terms of programming and soft skills. I wish Google will continue this program or initiate some similar program to continue cultivating new generations of open-source software developers / development enthusiasts to further our aim to make open-source approachable and usable for all.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=eb6b2bccce85" width="1" height="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200823_0807_kakirastern/</guid><pubDate>Sun, 23 Aug 2020 07:07:23 GMT</pubDate></item><item><title>Looking for the answers!</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200820_1000_meuge/</link><dc:creator>Meuge</dc:creator><description>&lt;div&gt;&lt;p&gt;Hey, folks! The last weeks were really exciting getting done an algorithm for ground-track orbit. After long days trying to find the perfect approach for Poliastro, we decided to give it a go bringing to life this &lt;a href="http://openastronomy.org/Universe_OA/posts/2020/08/20200820_1000_meuge/%5Bhttps:/www.researchgate.net/publication/287869810_Daily_repeat-groundtrack_Mars_orbits"&gt;paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="wow" src="https://media.giphy.com/media/gZBYbXHtVcYKs/giphy.gif"&gt;&lt;/p&gt;
&lt;h2&gt;But everything it's not what it seems&lt;/h2&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Well, we thought it will be quite straightforward but much too learn still I have , right Master Yoda?  &lt;/p&gt;
&lt;p&gt;&lt;img alt="do-or-do-not" src="https://media.giphy.com/media/pvDp7Ewpzt0o8/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So I am not gonna lie to you folks, it wasn't that easy, but as Rocky says, "Every champion was once a contender who refused to give up". So now you are gonna know how we solve it. Game on!  First things first, we needed to apply numerical analysis in order to obtain the roots of the equation, because given the complexity of the function, there was no other way around. &lt;/p&gt;
&lt;p&gt;&lt;img alt="oh-no" src="https://media.giphy.com/media/xT5LMLMPdRh2VRNVLi/giphy.gif"&gt;&lt;/p&gt;
&lt;p&gt;So we had to come up …&lt;/p&gt;&lt;/div&gt;</description><category>poliastro</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200820_1000_meuge/</guid><pubDate>Thu, 20 Aug 2020 09:00:00 GMT</pubDate></item><item><title>Week 9 &amp; 10: Beginning of the last month!</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200818_1113_siddharthlal25/</link><dc:creator>siddharthlal25</dc:creator><description>&lt;div&gt;&lt;h3 id="hey-sid-lets-get-to-the-point-directly-did-your-previous-pr-get-merged"&gt;&lt;em&gt;Hey Sid! Let’s get to the point directly, did your previous PR get merged?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Yes! The PR which involved creation of new data structure for &lt;code class="language-plaintext highlighter-rouge"&gt;ImageHDU&lt;/code&gt;s got merged, the code is up and running now!&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3 id="great-tell-us-whats-the-next-pr-all-about"&gt;&lt;em&gt;Great, tell us what’s the next PR all about&lt;/em&gt;?&lt;/h3&gt;

&lt;p&gt;After creating the data structure &lt;code class="language-plaintext highlighter-rouge"&gt;CCDData&lt;/code&gt; and making it compatible with all methods in &lt;a href="https://github.com/JuliaAstro/CCDReduction.jl/pull/31"&gt;#31&lt;/a&gt;, I went back to my closed PR &lt;a href="https://github.com/JuliaAstro/CCDReduction.jl/pull/30"&gt;#30&lt;/a&gt; to take the code and make it compatible with &lt;code class="language-plaintext highlighter-rouge"&gt;CCDData&lt;/code&gt;. &lt;a href="https://github.com/JuliaAstro/CCDReduction.jl/pull/30"&gt;#30&lt;/a&gt; consists of code that enables a user to apply function on a collection of &lt;code class="language-plaintext highlighter-rouge"&gt;ImageHDU&lt;/code&gt;s and then save them in new &lt;code class="language-plaintext highlighter-rouge"&gt;FITS&lt;/code&gt; files. Now, the new PR &lt;a href="https://github.com/JuliaAstro/CCDReduction.jl/pull/33"&gt;#33&lt;/a&gt; enables the same functionalities but with &lt;code class="language-plaintext highlighter-rouge"&gt;CCDData&lt;/code&gt;s. This PR is in it’s last stages of review and will get merged soon!&lt;/p&gt;

&lt;h3 id="hmmm-that-sounds-interesting-have-you-prepared-some-examples-to-show-the-code-in-action"&gt;&lt;em&gt;Hmmm, that sounds interesting, have you prepared some examples to show the code in action?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Not yet, but don’t worry, I have started working on proper usage guidelines and examples, will put it up soon!&lt;/p&gt;

&lt;h3 id="cool-tell-us-about-your-future-plans"&gt;&lt;em&gt;Cool! Tell us about your future plans?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Currently, my primary goal is to get PR &lt;a href="https://github.com/JuliaAstro/CCDReduction.jl/pull/33"&gt;#33&lt;/a&gt; merged, after this I will put up some basic examples for complete reduction process. Following all this, I will push a new release and keep working on stretch goals!&lt;/p&gt;

&lt;p&gt;Stay tuned to know more!&lt;/p&gt;

&lt;p&gt;-sl&lt;/p&gt;&lt;/div&gt;</description><category>JuliaAstro</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200818_1113_siddharthlal25/</guid><pubDate>Tue, 18 Aug 2020 10:13:56 GMT</pubDate></item><item><title>GSOC 2020: New additions to old PRs</title><link>http://openastronomy.org/Universe_OA/posts/2020/08/20200811_1829_abhijeetmanhas/</link><dc:creator>Abhijeet Manhas</dc:creator><description>&lt;div&gt;&lt;h4&gt;GSOC 2020: Polishing my code&lt;/h4&gt;&lt;p&gt;I spent last most of the previous two weeks on resolving reviews on my old PRs and improving gallery examples.&lt;/p&gt;
&lt;figure&gt;&lt;img alt="" src="https://cdn-images-1.medium.com/max/852/0*fsXbXhCmI6jKwUv6.jpg"&gt;&lt;figcaption&gt;Heavy rains begins in Vadodara&lt;/figcaption&gt;&lt;/figure&gt;&lt;h4&gt;Knowing time intervals from URL patterns&lt;/h4&gt;&lt;p&gt;I created &lt;a href="https://github.com/sunpy/sunpy/pull/4419"&gt;PR #4419&lt;/a&gt; that allows getting file time-ranges from the URL using the scraper. The URL patterns from most of the archives have start time in them. Either the end time was usually hardcoded for all clients or we only used start time to validate the file URLs against a time interval.&lt;/p&gt;
&lt;p&gt;In my Clients Generalization, to escape this repetitiveness the code in post_search_hook() was somewhat less generalized. It was assumed that all files are day-long. Thus I generalized it and moved it to the scraper. From the base URL pattern, we can now the precision of time supported by the archive directories, and then using them we can find the end times. Say there are yearly files in an archive. Then we can default the end time to the end of that year. Moreover, if this time range overlaps with the searched time interval, the file is valid. We check it using _check_timerange().&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;h4&gt;Removed optional from class attributes&lt;/h4&gt;&lt;p&gt;We now need to register all ‘attrs’ supported by the client in PR #4321. This helped me to escape from defining optional attrs. We use register_values() only to know whether the client can serve the query or not.&lt;/p&gt;
&lt;h4&gt;Fido metadata queries Gallery Example&lt;/h4&gt;&lt;p&gt;I have added a new gallery example in &lt;a href="https://github.com/sunpy/sunpy/pull/4358"&gt;PR #4358&lt;/a&gt; which summarizes what we can do after the pull request is merged. We can make metadata queries and easily inspect them. A lot of minor improvements were also made in the PR.&lt;/p&gt;
&lt;iframe src="http://openastronomy.org/Universe_OA/posts/2020/08/20200811_1829_abhijeetmanhas/" width="0" height="0" frameborder="0" scrolling="no"&gt;&lt;a href="https://medium.com/media/0e1004e2649bfd262dda2f4e37fed4a8/href"&gt;https://medium.com/media/0e1004e2649bfd262dda2f4e37fed4a8/href&lt;/a&gt;&lt;/iframe&gt;&lt;h4&gt;Extracting client responses from Fido result&lt;/h4&gt;&lt;p&gt;Earlier we have to specify index as an argument to get_response() to do that. It required us to count the records to find the correct index. Now we can easily use the name of the client to retrieve QueryResponse instances for that client. If there are multiple such records, then a list of all matching records will be returned.&lt;/p&gt;
&lt;h4&gt;ToDos for the final two weeks&lt;/h4&gt;&lt;p&gt;I have to document how to write Fido clients and add tests to the Fido metadata compatibility. Let’s see what other issues I can tackle in these pull requests.&lt;/p&gt;
&lt;p&gt;Till then,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CAPRE NOCTEM!&lt;/strong&gt;&lt;/p&gt;
&lt;img src="https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c2d1683fe428" width="1" height="1"&gt;&lt;/div&gt;</description><category>SunPy</category><guid>http://openastronomy.org/Universe_OA/posts/2020/08/20200811_1829_abhijeetmanhas/</guid><pubDate>Tue, 11 Aug 2020 17:29:54 GMT</pubDate></item></channel></rss>